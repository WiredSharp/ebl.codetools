using System;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using CodeTools.MSBuild.Helpers.VisualStudio;

namespace VSProjectNormalizer.Normalizers
{
	internal class CsharpProjectFileNormalizer : ProjectFileNormalizer
	{
	    protected const string SOLUTION_DIR_TAG = "SolutionDir";
        protected const string SOLUTION_NAME_TAG = "SolutionName";
        protected const string OUTPUT_PATH_TAG = "OutputPath";
        protected const string ASSEMBLY_NAME_TAG = "AssemblyName";
        protected const string PLATFORM_PATH_TAG = "platformPath";

        protected const string GENERATED_REGION_TAG = "GENERATED BY VSPROJECTNORMALIZER: DO NOT REMOVE COMMENT";

        protected const bool ADD_IS_DEFINED = true;

	    protected readonly ProjectFile _projectFile;

	    public CsharpProjectFileNormalizer(ProjectFile projectFile, Settings settings)
            : base(settings)
        {
            if (projectFile == null) throw new ArgumentNullException(nameof(projectFile));
            _projectFile = projectFile;
        }

        public void Normalize()
	    {
	        RemoveUnwantedNodes();
	        RemoveGeneratedNodes();
            XElement commonPropertyGroup = _projectFile.PropertyGroups().First();
	        XNode start = commonPropertyGroup;
	        XComment regionMark = BuildGeneratedRegionMark();
	        start.AddAfterSelf(regionMark);
	        start = WithinRegion(regionMark);
	        start.AddAfterSelf(regionMark);
	    }

	    private XNode WithinRegion(XNode start)
	    {
	        start = HandleImports(start);
	        start = HandleProperties(start);
	        start = HandleOutputPath(start);
	        return start;
	    }

	    protected virtual void RemoveUnwantedNodes()
	    {
	        _projectFile.RemoveNodes(OUTPUT_PATH_TAG, INTERMEDIATE_OUTPUT_TAG);
	    }

	    private XNode HandleImports(XNode start)
	    {
	        string sharedProperties = CurrentSettings.CommonPropsFile;
	        XElement imports = _projectFile.NewImport(sharedProperties,
	                                                    Condition.And(Condition.TagNotDefined(SOLUTION_DIR_TAG),
	                                                                  Condition.Exists(sharedProperties)));
	        start.AddAfterSelf(imports);
            return imports;
	    }

	    protected virtual XNode HandleProperties(XNode current)
	    {
            XElement propertyGroup = _projectFile.NewPropertyGroup();
	        HandlePlatformProperty(propertyGroup);
            if (!propertyGroup.IsEmpty)
            {
                current.AddAfterSelf(propertyGroup);
                current = propertyGroup;
            }
            return current;
        }

	    private void HandlePlatformProperty(XElement propertyGroup)
	    {
	        propertyGroup.Add(_projectFile.NewProperty(PLATFORM_PATH_TAG, @"\$(Platform)", Condition.And(Condition.TagDefined("Platform"), Condition.TagNotEqual("Platform","AnyCPU"))));
	    }

	    protected virtual XNode HandleOutputPath(XNode current)
	    {
	        XElement propertyGroup = _projectFile.NewPropertyGroup(Condition.TagNotDefined(SOLUTION_DIR_TAG)
                ,_projectFile.NewProperty(OUTPUT_PATH_TAG, CurrentSettings.ProjectBuildFolder, ADD_IS_DEFINED)
                ,_projectFile.NewProperty(INTERMEDIATE_OUTPUT_TAG, CurrentSettings.ProjectIntermediateFolder, !ADD_IS_DEFINED));
            current.AddAfterSelf(propertyGroup);
	        current = propertyGroup;
            propertyGroup = _projectFile.NewPropertyGroup(Condition.TagDefined(SOLUTION_DIR_TAG)
                , _projectFile.NewProperty(OUTPUT_PATH_TAG, UpdateSolutionBuildFolder(CurrentSettings.SolutionBuildFolder), ADD_IS_DEFINED)
                , _projectFile.NewProperty(INTERMEDIATE_OUTPUT_TAG, CurrentSettings.SolutionIntermediateFolder, !ADD_IS_DEFINED));
            current.AddAfterSelf(propertyGroup);
            return propertyGroup;
	    }

	    protected string UpdateSolutionBuildFolder(string solutionBuildFolderTemplate)
	    {
	        string projectTypeFolder = BuildOutputPath(_projectFile.AssemblyName().Single().Value);
	        return solutionBuildFolderTemplate.Replace("{ProjectType}", projectTypeFolder);
	    }

        protected void RemoveGeneratedNodes()
	    {
	        XComment generatedRegionMark = BuildGeneratedRegionMark();
	        foreach (XNode node in _projectFile.GetRegion(generatedRegionMark))
	        {
	            node.Remove();
	        }
	    }

	    protected XComment BuildGeneratedRegionMark()
	    {
	        return new XComment(GENERATED_REGION_TAG);
	    }                 
	}
}
